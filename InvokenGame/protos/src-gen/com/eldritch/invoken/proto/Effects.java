// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/eldritch/scifirpg/proto/effects.proto

package com.eldritch.invoken.proto;

public final class Effects {
  private Effects() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code scifirpg.DamageType}
   */
  public enum DamageType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PHYSICAL = 0;</code>
     */
    PHYSICAL(0, 0),
    /**
     * <code>THERMAL = 1;</code>
     *
     * <pre>
     * high damage, spreads, moderate duration
     * </pre>
     */
    THERMAL(1, 1),
    /**
     * <code>RADIOACTIVE = 2;</code>
     *
     * <pre>
     * weakens
     * </pre>
     */
    RADIOACTIVE(2, 2),
    /**
     * <code>TOXIC = 3;</code>
     *
     * <pre>
     * low damage, high duration
     * </pre>
     */
    TOXIC(3, 3),
    /**
     * <code>VIRAL = 4;</code>
     *
     * <pre>
     * spreads, high duration
     * </pre>
     */
    VIRAL(4, 4),
    ;

    /**
     * <code>PHYSICAL = 0;</code>
     */
    public static final int PHYSICAL_VALUE = 0;
    /**
     * <code>THERMAL = 1;</code>
     *
     * <pre>
     * high damage, spreads, moderate duration
     * </pre>
     */
    public static final int THERMAL_VALUE = 1;
    /**
     * <code>RADIOACTIVE = 2;</code>
     *
     * <pre>
     * weakens
     * </pre>
     */
    public static final int RADIOACTIVE_VALUE = 2;
    /**
     * <code>TOXIC = 3;</code>
     *
     * <pre>
     * low damage, high duration
     * </pre>
     */
    public static final int TOXIC_VALUE = 3;
    /**
     * <code>VIRAL = 4;</code>
     *
     * <pre>
     * spreads, high duration
     * </pre>
     */
    public static final int VIRAL_VALUE = 4;


    public final int getNumber() { return value; }

    public static DamageType valueOf(int value) {
      switch (value) {
        case 0: return PHYSICAL;
        case 1: return THERMAL;
        case 2: return RADIOACTIVE;
        case 3: return TOXIC;
        case 4: return VIRAL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DamageType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<DamageType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DamageType>() {
            public DamageType findValueByNumber(int number) {
              return DamageType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.eldritch.invoken.proto.Effects.getDescriptor().getEnumTypes().get(0);
    }

    private static final DamageType[] VALUES = values();

    public static DamageType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private DamageType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:scifirpg.DamageType)
  }

  public interface EffectOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .scifirpg.Effect.Type type = 8;
    /**
     * <code>optional .scifirpg.Effect.Type type = 8;</code>
     */
    boolean hasType();
    /**
     * <code>optional .scifirpg.Effect.Type type = 8;</code>
     */
    com.eldritch.invoken.proto.Effects.Effect.Type getType();

    // optional .scifirpg.Effect.Range range = 2;
    /**
     * <code>optional .scifirpg.Effect.Range range = 2;</code>
     */
    boolean hasRange();
    /**
     * <code>optional .scifirpg.Effect.Range range = 2;</code>
     */
    com.eldritch.invoken.proto.Effects.Effect.Range getRange();

    // optional int32 magnitude = 1;
    /**
     * <code>optional int32 magnitude = 1;</code>
     */
    boolean hasMagnitude();
    /**
     * <code>optional int32 magnitude = 1;</code>
     */
    int getMagnitude();

    // optional int32 duration = 3 [default = 0];
    /**
     * <code>optional int32 duration = 3 [default = 0];</code>
     *
     * <pre>
     * Length of effect in complete turns (turn = all actors take action)
     * -1 = constant
     * 0 = immediate
     * </pre>
     */
    boolean hasDuration();
    /**
     * <code>optional int32 duration = 3 [default = 0];</code>
     *
     * <pre>
     * Length of effect in complete turns (turn = all actors take action)
     * -1 = constant
     * 0 = immediate
     * </pre>
     */
    int getDuration();

    // optional string target = 6;
    /**
     * <code>optional string target = 6;</code>
     */
    boolean hasTarget();
    /**
     * <code>optional string target = 6;</code>
     */
    java.lang.String getTarget();
    /**
     * <code>optional string target = 6;</code>
     */
    com.google.protobuf.ByteString
        getTargetBytes();

    // optional .scifirpg.DamageType damage_type = 4;
    /**
     * <code>optional .scifirpg.DamageType damage_type = 4;</code>
     *
     * <pre>
     * Only applicable to certain types
     * </pre>
     */
    boolean hasDamageType();
    /**
     * <code>optional .scifirpg.DamageType damage_type = 4;</code>
     *
     * <pre>
     * Only applicable to certain types
     * </pre>
     */
    com.eldritch.invoken.proto.Effects.DamageType getDamageType();

    // optional .scifirpg.Discipline discipline = 5;
    /**
     * <code>optional .scifirpg.Discipline discipline = 5;</code>
     */
    boolean hasDiscipline();
    /**
     * <code>optional .scifirpg.Discipline discipline = 5;</code>
     */
    com.eldritch.invoken.proto.Disciplines.Discipline getDiscipline();

    // optional .scifirpg.Influence influence = 9;
    /**
     * <code>optional .scifirpg.Influence influence = 9;</code>
     */
    boolean hasInfluence();
    /**
     * <code>optional .scifirpg.Influence influence = 9;</code>
     */
    com.eldritch.invoken.proto.Disciplines.Influence getInfluence();

    // optional bool active = 7 [default = true];
    /**
     * <code>optional bool active = 7 [default = true];</code>
     *
     * <pre>
     * Active effects must be used manually in context-specific situations.
     * If an item or aug has active effects, an action card will be placed
     * into the player's deck.  The active effects for an aug can only be used
     * once per stage.  Active effects for items can be used repeatedly.
     *
     * Passive effects have their effects applied upon staging or equipping and stack with
     * successive stages (for augs).  These effects are not applied again if the action card
     * is used to trigger the active effects associated with an item or aug.
     * </pre>
     */
    boolean hasActive();
    /**
     * <code>optional bool active = 7 [default = true];</code>
     *
     * <pre>
     * Active effects must be used manually in context-specific situations.
     * If an item or aug has active effects, an action card will be placed
     * into the player's deck.  The active effects for an aug can only be used
     * once per stage.  Active effects for items can be used repeatedly.
     *
     * Passive effects have their effects applied upon staging or equipping and stack with
     * successive stages (for augs).  These effects are not applied again if the action card
     * is used to trigger the active effects associated with an item or aug.
     * </pre>
     */
    boolean getActive();

    // optional bool dispel = 10 [default = false];
    /**
     * <code>optional bool dispel = 10 [default = false];</code>
     */
    boolean hasDispel();
    /**
     * <code>optional bool dispel = 10 [default = false];</code>
     */
    boolean getDispel();
  }
  /**
   * Protobuf type {@code scifirpg.Effect}
   */
  public static final class Effect extends
      com.google.protobuf.GeneratedMessage
      implements EffectOrBuilder {
    // Use Effect.newBuilder() to construct.
    private Effect(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Effect(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Effect defaultInstance;
    public static Effect getDefaultInstance() {
      return defaultInstance;
    }

    public Effect getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Effect(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000004;
              magnitude_ = input.readInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.eldritch.invoken.proto.Effects.Effect.Range value = com.eldritch.invoken.proto.Effects.Effect.Range.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                range_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000008;
              duration_ = input.readInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.eldritch.invoken.proto.Effects.DamageType value = com.eldritch.invoken.proto.Effects.DamageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                damageType_ = value;
              }
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              com.eldritch.invoken.proto.Disciplines.Discipline value = com.eldritch.invoken.proto.Disciplines.Discipline.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                discipline_ = value;
              }
              break;
            }
            case 50: {
              bitField0_ |= 0x00000010;
              target_ = input.readBytes();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000100;
              active_ = input.readBool();
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              com.eldritch.invoken.proto.Effects.Effect.Type value = com.eldritch.invoken.proto.Effects.Effect.Type.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 72: {
              int rawValue = input.readEnum();
              com.eldritch.invoken.proto.Disciplines.Influence value = com.eldritch.invoken.proto.Disciplines.Influence.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(9, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                influence_ = value;
              }
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              dispel_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.eldritch.invoken.proto.Effects.internal_static_scifirpg_Effect_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.eldritch.invoken.proto.Effects.internal_static_scifirpg_Effect_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.eldritch.invoken.proto.Effects.Effect.class, com.eldritch.invoken.proto.Effects.Effect.Builder.class);
    }

    public static com.google.protobuf.Parser<Effect> PARSER =
        new com.google.protobuf.AbstractParser<Effect>() {
      public Effect parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Effect(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Effect> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code scifirpg.Effect.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DAMAGE_MELEE = 0;</code>
       *
       * <pre>
       * Attack
       * </pre>
       */
      DAMAGE_MELEE(0, 0),
      /**
       * <code>DAMAGE_RANGED = 34;</code>
       */
      DAMAGE_RANGED(1, 34),
      /**
       * <code>DAMAGE_HEAVY = 35;</code>
       */
      DAMAGE_HEAVY(2, 35),
      /**
       * <code>DAMAGE_COORDINATED = 36;</code>
       */
      DAMAGE_COORDINATED(3, 36),
      /**
       * <code>DAMAGE_CORRUPTION = 37;</code>
       */
      DAMAGE_CORRUPTION(4, 37),
      /**
       * <code>DRAIN = 1;</code>
       *
       * <pre>
       * Corruption: Transfer life to player, W/A
       * </pre>
       */
      DRAIN(5, 1),
      /**
       * <code>SUPPRESS = 45;</code>
       */
      SUPPRESS(6, 45),
      /**
       * <code>ACCURACY_MOD = 40;</code>
       *
       * <pre>
       * Combat modifiers
       * </pre>
       */
      ACCURACY_MOD(7, 40),
      /**
       * <code>DEFENSE_MOD = 41;</code>
       */
      DEFENSE_MOD(8, 41),
      /**
       * <code>RESISTANCE_MOD = 42;</code>
       */
      RESISTANCE_MOD(9, 42),
      /**
       * <code>PERCEPTION_MOD = 43;</code>
       */
      PERCEPTION_MOD(10, 43),
      /**
       * <code>CRITICAL_MOD = 44;</code>
       */
      CRITICAL_MOD(11, 44),
      /**
       * <code>SNEAK = 2;</code>
       *
       * <pre>
       * Deceive
       * </pre>
       */
      SNEAK(12, 2),
      /**
       * <code>PILFER = 3;</code>
       *
       * <pre>
       * Steal money or item from the TARGET
       * </pre>
       */
      PILFER(13, 3),
      /**
       * <code>STALK = 4;</code>
       *
       * <pre>
       * Increase damage multiplier by MAGNITUDE without being detected
       * </pre>
       */
      STALK(14, 4),
      /**
       * <code>IMPERSONATE = 5;</code>
       *
       * <pre>
       * Pretend to belong to TARGET faction with rank MAGNITUDE
       * </pre>
       */
      IMPERSONATE(15, 5),
      /**
       * <code>AUTHORIZE = 39;</code>
       *
       * <pre>
       * Does not improve reaction, but prevents trespass
       * </pre>
       */
      AUTHORIZE(16, 39),
      /**
       * <code>DETECT_EQUIPMENT = 6;</code>
       *
       * <pre>
       * Deceive - Espionage
       * </pre>
       */
      DETECT_EQUIPMENT(17, 6),
      /**
       * <code>DETECT_AUGS = 7;</code>
       *
       * <pre>
       * Discover what augs TARGET has currently staged
       * </pre>
       */
      DETECT_AUGS(18, 7),
      /**
       * <code>DETECT_BUFFER = 8;</code>
       *
       * <pre>
       * Discover what augs TARGET has in their buffer
       * </pre>
       */
      DETECT_BUFFER(19, 8),
      /**
       * <code>DETECT_TRAPS = 9;</code>
       *
       * <pre>
       * Discover what traps the TARGET has deployed
       * </pre>
       */
      DETECT_TRAPS(20, 9),
      /**
       * <code>OPEN = 10;</code>
       *
       * <pre>
       * Deceive - Hacking
       * </pre>
       */
      OPEN(21, 10),
      /**
       * <code>DISABLE = 11;</code>
       *
       * <pre>
       * Prevent use and effects of a given undeployed aug (useless w/o espionage)
       * </pre>
       */
      DISABLE(22, 11),
      /**
       * <code>SHUTDOWN = 12;</code>
       *
       * <pre>
       * Disable an active aug (useless on passive w/o espionage)
       * </pre>
       */
      SHUTDOWN(23, 12),
      /**
       * <code>SCAN = 13;</code>
       *
       * <pre>
       * Execute - Analysis
       * </pre>
       */
      SCAN(24, 13),
      /**
       * <code>PARALYZE = 14;</code>
       *
       * <pre>
       * Execute - Manipulation
       * </pre>
       */
      PARALYZE(25, 14),
      /**
       * <code>CONTROL = 15;</code>
       *
       * <pre>
       * TARGET up to level MAGNITUDE becomes ally for DURATION
       * </pre>
       */
      CONTROL(26, 15),
      /**
       * <code>CREATE_GOLEM = 16;</code>
       *
       * <pre>
       * Execute - Fabrication
       * </pre>
       */
      CREATE_GOLEM(27, 16),
      /**
       * <code>CREATE_SWARM = 17;</code>
       */
      CREATE_SWARM(28, 17),
      /**
       * <code>REANIMATE = 18;</code>
       *
       * <pre>
       * TARGET becomes a puppet ally on death for DURATION
       * </pre>
       */
      REANIMATE(29, 18),
      /**
       * <code>REGENERATE = 19;</code>
       *
       * <pre>
       * Execute - Upgrade
       * </pre>
       */
      REGENERATE(30, 19),
      /**
       * <code>BARRIER = 20;</code>
       *
       * <pre>
       * MAGNITUDE change in defense to DAMAGE_TYPE on TARGET for DURATION
       * </pre>
       */
      BARRIER(31, 20),
      /**
       * <code>MIRROR = 21;</code>
       *
       * <pre>
       * TARGET reflects up to MAGNITUDE damage of DAMAGE_TYPE for DURATION
       * </pre>
       */
      MIRROR(32, 21),
      /**
       * <code>ABSORB = 22;</code>
       *
       * <pre>
       * TARGET absorbs up to MAGNITUDE damage of DAMAGE_TYPE for DURATION
       * </pre>
       */
      ABSORB(33, 22),
      /**
       * <code>CLOAK = 23;</code>
       *
       * <pre>
       * Execute - Illusion
       * </pre>
       */
      CLOAK(34, 23),
      /**
       * <code>MUFFLE = 24;</code>
       *
       * <pre>
       * TARGET gets drop bonus of MAGNITUDE
       * </pre>
       */
      MUFFLE(35, 24),
      /**
       * <code>DETECT_TRAITS = 25;</code>
       *
       * <pre>
       * Execute - Empathy
       * </pre>
       */
      DETECT_TRAITS(36, 25),
      /**
       * <code>CHARM = 26;</code>
       */
      CHARM(37, 26),
      /**
       * <code>CALM = 27;</code>
       */
      CALM(38, 27),
      /**
       * <code>FRENZY = 28;</code>
       */
      FRENZY(39, 28),
      /**
       * <code>PARRY = 29;</code>
       *
       * <pre>
       * Counter
       * </pre>
       */
      PARRY(40, 29),
      /**
       * <code>DEFEND = 30;</code>
       *
       * <pre>
       * Avoid a ranged attack
       * </pre>
       */
      DEFEND(41, 30),
      /**
       * <code>RESIST = 31;</code>
       *
       * <pre>
       * Prevent the targeted execution (includes corruption), W/A
       * </pre>
       */
      RESIST(42, 31),
      /**
       * <code>REVEAL = 32;</code>
       *
       * <pre>
       * Discover deceptive activity, including Illusion, W/S
       * </pre>
       */
      REVEAL(43, 32),
      /**
       * <code>INTERRUPT = 33;</code>
       *
       * <pre>
       * Prevent negative duration effect
       * </pre>
       */
      INTERRUPT(44, 33),
      /**
       * <code>INFLUENCE = 38;</code>
       *
       * <pre>
       * Dialogue - Influence
       * </pre>
       */
      INFLUENCE(45, 38),
      ;

      /**
       * <code>DAMAGE_MELEE = 0;</code>
       *
       * <pre>
       * Attack
       * </pre>
       */
      public static final int DAMAGE_MELEE_VALUE = 0;
      /**
       * <code>DAMAGE_RANGED = 34;</code>
       */
      public static final int DAMAGE_RANGED_VALUE = 34;
      /**
       * <code>DAMAGE_HEAVY = 35;</code>
       */
      public static final int DAMAGE_HEAVY_VALUE = 35;
      /**
       * <code>DAMAGE_COORDINATED = 36;</code>
       */
      public static final int DAMAGE_COORDINATED_VALUE = 36;
      /**
       * <code>DAMAGE_CORRUPTION = 37;</code>
       */
      public static final int DAMAGE_CORRUPTION_VALUE = 37;
      /**
       * <code>DRAIN = 1;</code>
       *
       * <pre>
       * Corruption: Transfer life to player, W/A
       * </pre>
       */
      public static final int DRAIN_VALUE = 1;
      /**
       * <code>SUPPRESS = 45;</code>
       */
      public static final int SUPPRESS_VALUE = 45;
      /**
       * <code>ACCURACY_MOD = 40;</code>
       *
       * <pre>
       * Combat modifiers
       * </pre>
       */
      public static final int ACCURACY_MOD_VALUE = 40;
      /**
       * <code>DEFENSE_MOD = 41;</code>
       */
      public static final int DEFENSE_MOD_VALUE = 41;
      /**
       * <code>RESISTANCE_MOD = 42;</code>
       */
      public static final int RESISTANCE_MOD_VALUE = 42;
      /**
       * <code>PERCEPTION_MOD = 43;</code>
       */
      public static final int PERCEPTION_MOD_VALUE = 43;
      /**
       * <code>CRITICAL_MOD = 44;</code>
       */
      public static final int CRITICAL_MOD_VALUE = 44;
      /**
       * <code>SNEAK = 2;</code>
       *
       * <pre>
       * Deceive
       * </pre>
       */
      public static final int SNEAK_VALUE = 2;
      /**
       * <code>PILFER = 3;</code>
       *
       * <pre>
       * Steal money or item from the TARGET
       * </pre>
       */
      public static final int PILFER_VALUE = 3;
      /**
       * <code>STALK = 4;</code>
       *
       * <pre>
       * Increase damage multiplier by MAGNITUDE without being detected
       * </pre>
       */
      public static final int STALK_VALUE = 4;
      /**
       * <code>IMPERSONATE = 5;</code>
       *
       * <pre>
       * Pretend to belong to TARGET faction with rank MAGNITUDE
       * </pre>
       */
      public static final int IMPERSONATE_VALUE = 5;
      /**
       * <code>AUTHORIZE = 39;</code>
       *
       * <pre>
       * Does not improve reaction, but prevents trespass
       * </pre>
       */
      public static final int AUTHORIZE_VALUE = 39;
      /**
       * <code>DETECT_EQUIPMENT = 6;</code>
       *
       * <pre>
       * Deceive - Espionage
       * </pre>
       */
      public static final int DETECT_EQUIPMENT_VALUE = 6;
      /**
       * <code>DETECT_AUGS = 7;</code>
       *
       * <pre>
       * Discover what augs TARGET has currently staged
       * </pre>
       */
      public static final int DETECT_AUGS_VALUE = 7;
      /**
       * <code>DETECT_BUFFER = 8;</code>
       *
       * <pre>
       * Discover what augs TARGET has in their buffer
       * </pre>
       */
      public static final int DETECT_BUFFER_VALUE = 8;
      /**
       * <code>DETECT_TRAPS = 9;</code>
       *
       * <pre>
       * Discover what traps the TARGET has deployed
       * </pre>
       */
      public static final int DETECT_TRAPS_VALUE = 9;
      /**
       * <code>OPEN = 10;</code>
       *
       * <pre>
       * Deceive - Hacking
       * </pre>
       */
      public static final int OPEN_VALUE = 10;
      /**
       * <code>DISABLE = 11;</code>
       *
       * <pre>
       * Prevent use and effects of a given undeployed aug (useless w/o espionage)
       * </pre>
       */
      public static final int DISABLE_VALUE = 11;
      /**
       * <code>SHUTDOWN = 12;</code>
       *
       * <pre>
       * Disable an active aug (useless on passive w/o espionage)
       * </pre>
       */
      public static final int SHUTDOWN_VALUE = 12;
      /**
       * <code>SCAN = 13;</code>
       *
       * <pre>
       * Execute - Analysis
       * </pre>
       */
      public static final int SCAN_VALUE = 13;
      /**
       * <code>PARALYZE = 14;</code>
       *
       * <pre>
       * Execute - Manipulation
       * </pre>
       */
      public static final int PARALYZE_VALUE = 14;
      /**
       * <code>CONTROL = 15;</code>
       *
       * <pre>
       * TARGET up to level MAGNITUDE becomes ally for DURATION
       * </pre>
       */
      public static final int CONTROL_VALUE = 15;
      /**
       * <code>CREATE_GOLEM = 16;</code>
       *
       * <pre>
       * Execute - Fabrication
       * </pre>
       */
      public static final int CREATE_GOLEM_VALUE = 16;
      /**
       * <code>CREATE_SWARM = 17;</code>
       */
      public static final int CREATE_SWARM_VALUE = 17;
      /**
       * <code>REANIMATE = 18;</code>
       *
       * <pre>
       * TARGET becomes a puppet ally on death for DURATION
       * </pre>
       */
      public static final int REANIMATE_VALUE = 18;
      /**
       * <code>REGENERATE = 19;</code>
       *
       * <pre>
       * Execute - Upgrade
       * </pre>
       */
      public static final int REGENERATE_VALUE = 19;
      /**
       * <code>BARRIER = 20;</code>
       *
       * <pre>
       * MAGNITUDE change in defense to DAMAGE_TYPE on TARGET for DURATION
       * </pre>
       */
      public static final int BARRIER_VALUE = 20;
      /**
       * <code>MIRROR = 21;</code>
       *
       * <pre>
       * TARGET reflects up to MAGNITUDE damage of DAMAGE_TYPE for DURATION
       * </pre>
       */
      public static final int MIRROR_VALUE = 21;
      /**
       * <code>ABSORB = 22;</code>
       *
       * <pre>
       * TARGET absorbs up to MAGNITUDE damage of DAMAGE_TYPE for DURATION
       * </pre>
       */
      public static final int ABSORB_VALUE = 22;
      /**
       * <code>CLOAK = 23;</code>
       *
       * <pre>
       * Execute - Illusion
       * </pre>
       */
      public static final int CLOAK_VALUE = 23;
      /**
       * <code>MUFFLE = 24;</code>
       *
       * <pre>
       * TARGET gets drop bonus of MAGNITUDE
       * </pre>
       */
      public static final int MUFFLE_VALUE = 24;
      /**
       * <code>DETECT_TRAITS = 25;</code>
       *
       * <pre>
       * Execute - Empathy
       * </pre>
       */
      public static final int DETECT_TRAITS_VALUE = 25;
      /**
       * <code>CHARM = 26;</code>
       */
      public static final int CHARM_VALUE = 26;
      /**
       * <code>CALM = 27;</code>
       */
      public static final int CALM_VALUE = 27;
      /**
       * <code>FRENZY = 28;</code>
       */
      public static final int FRENZY_VALUE = 28;
      /**
       * <code>PARRY = 29;</code>
       *
       * <pre>
       * Counter
       * </pre>
       */
      public static final int PARRY_VALUE = 29;
      /**
       * <code>DEFEND = 30;</code>
       *
       * <pre>
       * Avoid a ranged attack
       * </pre>
       */
      public static final int DEFEND_VALUE = 30;
      /**
       * <code>RESIST = 31;</code>
       *
       * <pre>
       * Prevent the targeted execution (includes corruption), W/A
       * </pre>
       */
      public static final int RESIST_VALUE = 31;
      /**
       * <code>REVEAL = 32;</code>
       *
       * <pre>
       * Discover deceptive activity, including Illusion, W/S
       * </pre>
       */
      public static final int REVEAL_VALUE = 32;
      /**
       * <code>INTERRUPT = 33;</code>
       *
       * <pre>
       * Prevent negative duration effect
       * </pre>
       */
      public static final int INTERRUPT_VALUE = 33;
      /**
       * <code>INFLUENCE = 38;</code>
       *
       * <pre>
       * Dialogue - Influence
       * </pre>
       */
      public static final int INFLUENCE_VALUE = 38;


      public final int getNumber() { return value; }

      public static Type valueOf(int value) {
        switch (value) {
          case 0: return DAMAGE_MELEE;
          case 34: return DAMAGE_RANGED;
          case 35: return DAMAGE_HEAVY;
          case 36: return DAMAGE_COORDINATED;
          case 37: return DAMAGE_CORRUPTION;
          case 1: return DRAIN;
          case 45: return SUPPRESS;
          case 40: return ACCURACY_MOD;
          case 41: return DEFENSE_MOD;
          case 42: return RESISTANCE_MOD;
          case 43: return PERCEPTION_MOD;
          case 44: return CRITICAL_MOD;
          case 2: return SNEAK;
          case 3: return PILFER;
          case 4: return STALK;
          case 5: return IMPERSONATE;
          case 39: return AUTHORIZE;
          case 6: return DETECT_EQUIPMENT;
          case 7: return DETECT_AUGS;
          case 8: return DETECT_BUFFER;
          case 9: return DETECT_TRAPS;
          case 10: return OPEN;
          case 11: return DISABLE;
          case 12: return SHUTDOWN;
          case 13: return SCAN;
          case 14: return PARALYZE;
          case 15: return CONTROL;
          case 16: return CREATE_GOLEM;
          case 17: return CREATE_SWARM;
          case 18: return REANIMATE;
          case 19: return REGENERATE;
          case 20: return BARRIER;
          case 21: return MIRROR;
          case 22: return ABSORB;
          case 23: return CLOAK;
          case 24: return MUFFLE;
          case 25: return DETECT_TRAITS;
          case 26: return CHARM;
          case 27: return CALM;
          case 28: return FRENZY;
          case 29: return PARRY;
          case 30: return DEFEND;
          case 31: return RESIST;
          case 32: return REVEAL;
          case 33: return INTERRUPT;
          case 38: return INFLUENCE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.eldritch.invoken.proto.Effects.Effect.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Type(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:scifirpg.Effect.Type)
    }

    /**
     * Protobuf enum {@code scifirpg.Effect.Range}
     */
    public enum Range
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PLAYER = 0;</code>
       *
       * <pre>
       * Only affects the player
       * </pre>
       */
      PLAYER(0, 0),
      /**
       * <code>SELECTED = 1;</code>
       *
       * <pre>
       * Actively choose an Actor within an ActorEncounter
       * </pre>
       */
      SELECTED(1, 1),
      /**
       * <code>ALL = 2;</code>
       *
       * <pre>
       * Everyone in an ActorEncounter, including the player
       * </pre>
       */
      ALL(2, 2),
      /**
       * <code>ALL_OTHER = 3;</code>
       *
       * <pre>
       * Everyone in an ActorEncounter, except the player
       * </pre>
       */
      ALL_OTHER(3, 3),
      /**
       * <code>ALL_HOSTILE = 4;</code>
       *
       * <pre>
       * Everyone hostile to the player in an ActorEncounter
       * </pre>
       */
      ALL_HOSTILE(4, 4),
      /**
       * <code>ALL_ALLIED = 5;</code>
       *
       * <pre>
       * Everyone allied with the player in an ActorEncounter, including player
       * </pre>
       */
      ALL_ALLIED(5, 5),
      /**
       * <code>TARGETER = 6;</code>
       *
       * <pre>
       * Applies to counters, traps, and passive abilities that are triggered when someone targets player
       * </pre>
       */
      TARGETER(6, 6),
      /**
       * <code>SPREAD_ALL = 7;</code>
       */
      SPREAD_ALL(7, 7),
      /**
       * <code>SPREAD_HOSTILE = 8;</code>
       */
      SPREAD_HOSTILE(8, 8),
      ;

      /**
       * <code>PLAYER = 0;</code>
       *
       * <pre>
       * Only affects the player
       * </pre>
       */
      public static final int PLAYER_VALUE = 0;
      /**
       * <code>SELECTED = 1;</code>
       *
       * <pre>
       * Actively choose an Actor within an ActorEncounter
       * </pre>
       */
      public static final int SELECTED_VALUE = 1;
      /**
       * <code>ALL = 2;</code>
       *
       * <pre>
       * Everyone in an ActorEncounter, including the player
       * </pre>
       */
      public static final int ALL_VALUE = 2;
      /**
       * <code>ALL_OTHER = 3;</code>
       *
       * <pre>
       * Everyone in an ActorEncounter, except the player
       * </pre>
       */
      public static final int ALL_OTHER_VALUE = 3;
      /**
       * <code>ALL_HOSTILE = 4;</code>
       *
       * <pre>
       * Everyone hostile to the player in an ActorEncounter
       * </pre>
       */
      public static final int ALL_HOSTILE_VALUE = 4;
      /**
       * <code>ALL_ALLIED = 5;</code>
       *
       * <pre>
       * Everyone allied with the player in an ActorEncounter, including player
       * </pre>
       */
      public static final int ALL_ALLIED_VALUE = 5;
      /**
       * <code>TARGETER = 6;</code>
       *
       * <pre>
       * Applies to counters, traps, and passive abilities that are triggered when someone targets player
       * </pre>
       */
      public static final int TARGETER_VALUE = 6;
      /**
       * <code>SPREAD_ALL = 7;</code>
       */
      public static final int SPREAD_ALL_VALUE = 7;
      /**
       * <code>SPREAD_HOSTILE = 8;</code>
       */
      public static final int SPREAD_HOSTILE_VALUE = 8;


      public final int getNumber() { return value; }

      public static Range valueOf(int value) {
        switch (value) {
          case 0: return PLAYER;
          case 1: return SELECTED;
          case 2: return ALL;
          case 3: return ALL_OTHER;
          case 4: return ALL_HOSTILE;
          case 5: return ALL_ALLIED;
          case 6: return TARGETER;
          case 7: return SPREAD_ALL;
          case 8: return SPREAD_HOSTILE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Range>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Range>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Range>() {
              public Range findValueByNumber(int number) {
                return Range.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.eldritch.invoken.proto.Effects.Effect.getDescriptor().getEnumTypes().get(1);
      }

      private static final Range[] VALUES = values();

      public static Range valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Range(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:scifirpg.Effect.Range)
    }

    private int bitField0_;
    // optional .scifirpg.Effect.Type type = 8;
    public static final int TYPE_FIELD_NUMBER = 8;
    private com.eldritch.invoken.proto.Effects.Effect.Type type_;
    /**
     * <code>optional .scifirpg.Effect.Type type = 8;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .scifirpg.Effect.Type type = 8;</code>
     */
    public com.eldritch.invoken.proto.Effects.Effect.Type getType() {
      return type_;
    }

    // optional .scifirpg.Effect.Range range = 2;
    public static final int RANGE_FIELD_NUMBER = 2;
    private com.eldritch.invoken.proto.Effects.Effect.Range range_;
    /**
     * <code>optional .scifirpg.Effect.Range range = 2;</code>
     */
    public boolean hasRange() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .scifirpg.Effect.Range range = 2;</code>
     */
    public com.eldritch.invoken.proto.Effects.Effect.Range getRange() {
      return range_;
    }

    // optional int32 magnitude = 1;
    public static final int MAGNITUDE_FIELD_NUMBER = 1;
    private int magnitude_;
    /**
     * <code>optional int32 magnitude = 1;</code>
     */
    public boolean hasMagnitude() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 magnitude = 1;</code>
     */
    public int getMagnitude() {
      return magnitude_;
    }

    // optional int32 duration = 3 [default = 0];
    public static final int DURATION_FIELD_NUMBER = 3;
    private int duration_;
    /**
     * <code>optional int32 duration = 3 [default = 0];</code>
     *
     * <pre>
     * Length of effect in complete turns (turn = all actors take action)
     * -1 = constant
     * 0 = immediate
     * </pre>
     */
    public boolean hasDuration() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 duration = 3 [default = 0];</code>
     *
     * <pre>
     * Length of effect in complete turns (turn = all actors take action)
     * -1 = constant
     * 0 = immediate
     * </pre>
     */
    public int getDuration() {
      return duration_;
    }

    // optional string target = 6;
    public static final int TARGET_FIELD_NUMBER = 6;
    private java.lang.Object target_;
    /**
     * <code>optional string target = 6;</code>
     */
    public boolean hasTarget() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string target = 6;</code>
     */
    public java.lang.String getTarget() {
      java.lang.Object ref = target_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          target_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string target = 6;</code>
     */
    public com.google.protobuf.ByteString
        getTargetBytes() {
      java.lang.Object ref = target_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        target_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .scifirpg.DamageType damage_type = 4;
    public static final int DAMAGE_TYPE_FIELD_NUMBER = 4;
    private com.eldritch.invoken.proto.Effects.DamageType damageType_;
    /**
     * <code>optional .scifirpg.DamageType damage_type = 4;</code>
     *
     * <pre>
     * Only applicable to certain types
     * </pre>
     */
    public boolean hasDamageType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .scifirpg.DamageType damage_type = 4;</code>
     *
     * <pre>
     * Only applicable to certain types
     * </pre>
     */
    public com.eldritch.invoken.proto.Effects.DamageType getDamageType() {
      return damageType_;
    }

    // optional .scifirpg.Discipline discipline = 5;
    public static final int DISCIPLINE_FIELD_NUMBER = 5;
    private com.eldritch.invoken.proto.Disciplines.Discipline discipline_;
    /**
     * <code>optional .scifirpg.Discipline discipline = 5;</code>
     */
    public boolean hasDiscipline() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .scifirpg.Discipline discipline = 5;</code>
     */
    public com.eldritch.invoken.proto.Disciplines.Discipline getDiscipline() {
      return discipline_;
    }

    // optional .scifirpg.Influence influence = 9;
    public static final int INFLUENCE_FIELD_NUMBER = 9;
    private com.eldritch.invoken.proto.Disciplines.Influence influence_;
    /**
     * <code>optional .scifirpg.Influence influence = 9;</code>
     */
    public boolean hasInfluence() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .scifirpg.Influence influence = 9;</code>
     */
    public com.eldritch.invoken.proto.Disciplines.Influence getInfluence() {
      return influence_;
    }

    // optional bool active = 7 [default = true];
    public static final int ACTIVE_FIELD_NUMBER = 7;
    private boolean active_;
    /**
     * <code>optional bool active = 7 [default = true];</code>
     *
     * <pre>
     * Active effects must be used manually in context-specific situations.
     * If an item or aug has active effects, an action card will be placed
     * into the player's deck.  The active effects for an aug can only be used
     * once per stage.  Active effects for items can be used repeatedly.
     *
     * Passive effects have their effects applied upon staging or equipping and stack with
     * successive stages (for augs).  These effects are not applied again if the action card
     * is used to trigger the active effects associated with an item or aug.
     * </pre>
     */
    public boolean hasActive() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool active = 7 [default = true];</code>
     *
     * <pre>
     * Active effects must be used manually in context-specific situations.
     * If an item or aug has active effects, an action card will be placed
     * into the player's deck.  The active effects for an aug can only be used
     * once per stage.  Active effects for items can be used repeatedly.
     *
     * Passive effects have their effects applied upon staging or equipping and stack with
     * successive stages (for augs).  These effects are not applied again if the action card
     * is used to trigger the active effects associated with an item or aug.
     * </pre>
     */
    public boolean getActive() {
      return active_;
    }

    // optional bool dispel = 10 [default = false];
    public static final int DISPEL_FIELD_NUMBER = 10;
    private boolean dispel_;
    /**
     * <code>optional bool dispel = 10 [default = false];</code>
     */
    public boolean hasDispel() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool dispel = 10 [default = false];</code>
     */
    public boolean getDispel() {
      return dispel_;
    }

    private void initFields() {
      type_ = com.eldritch.invoken.proto.Effects.Effect.Type.DAMAGE_MELEE;
      range_ = com.eldritch.invoken.proto.Effects.Effect.Range.PLAYER;
      magnitude_ = 0;
      duration_ = 0;
      target_ = "";
      damageType_ = com.eldritch.invoken.proto.Effects.DamageType.PHYSICAL;
      discipline_ = com.eldritch.invoken.proto.Disciplines.Discipline.WARFARE;
      influence_ = com.eldritch.invoken.proto.Disciplines.Influence.PERSUASION;
      active_ = true;
      dispel_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(1, magnitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, range_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(3, duration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(4, damageType_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(5, discipline_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(6, getTargetBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(7, active_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(8, type_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(9, influence_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(10, dispel_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, magnitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, range_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, duration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, damageType_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, discipline_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getTargetBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, active_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, type_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, influence_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, dispel_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.eldritch.invoken.proto.Effects.Effect parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eldritch.invoken.proto.Effects.Effect parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eldritch.invoken.proto.Effects.Effect parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eldritch.invoken.proto.Effects.Effect parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eldritch.invoken.proto.Effects.Effect parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eldritch.invoken.proto.Effects.Effect parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.eldritch.invoken.proto.Effects.Effect parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.eldritch.invoken.proto.Effects.Effect parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.eldritch.invoken.proto.Effects.Effect parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eldritch.invoken.proto.Effects.Effect parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.eldritch.invoken.proto.Effects.Effect prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code scifirpg.Effect}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.eldritch.invoken.proto.Effects.EffectOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.eldritch.invoken.proto.Effects.internal_static_scifirpg_Effect_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.eldritch.invoken.proto.Effects.internal_static_scifirpg_Effect_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.eldritch.invoken.proto.Effects.Effect.class, com.eldritch.invoken.proto.Effects.Effect.Builder.class);
      }

      // Construct using com.eldritch.invoken.proto.Effects.Effect.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = com.eldritch.invoken.proto.Effects.Effect.Type.DAMAGE_MELEE;
        bitField0_ = (bitField0_ & ~0x00000001);
        range_ = com.eldritch.invoken.proto.Effects.Effect.Range.PLAYER;
        bitField0_ = (bitField0_ & ~0x00000002);
        magnitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        duration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        target_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        damageType_ = com.eldritch.invoken.proto.Effects.DamageType.PHYSICAL;
        bitField0_ = (bitField0_ & ~0x00000020);
        discipline_ = com.eldritch.invoken.proto.Disciplines.Discipline.WARFARE;
        bitField0_ = (bitField0_ & ~0x00000040);
        influence_ = com.eldritch.invoken.proto.Disciplines.Influence.PERSUASION;
        bitField0_ = (bitField0_ & ~0x00000080);
        active_ = true;
        bitField0_ = (bitField0_ & ~0x00000100);
        dispel_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.eldritch.invoken.proto.Effects.internal_static_scifirpg_Effect_descriptor;
      }

      public com.eldritch.invoken.proto.Effects.Effect getDefaultInstanceForType() {
        return com.eldritch.invoken.proto.Effects.Effect.getDefaultInstance();
      }

      public com.eldritch.invoken.proto.Effects.Effect build() {
        com.eldritch.invoken.proto.Effects.Effect result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.eldritch.invoken.proto.Effects.Effect buildPartial() {
        com.eldritch.invoken.proto.Effects.Effect result = new com.eldritch.invoken.proto.Effects.Effect(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.range_ = range_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.magnitude_ = magnitude_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.duration_ = duration_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.target_ = target_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.damageType_ = damageType_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.discipline_ = discipline_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.influence_ = influence_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.active_ = active_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.dispel_ = dispel_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.eldritch.invoken.proto.Effects.Effect) {
          return mergeFrom((com.eldritch.invoken.proto.Effects.Effect)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.eldritch.invoken.proto.Effects.Effect other) {
        if (other == com.eldritch.invoken.proto.Effects.Effect.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasRange()) {
          setRange(other.getRange());
        }
        if (other.hasMagnitude()) {
          setMagnitude(other.getMagnitude());
        }
        if (other.hasDuration()) {
          setDuration(other.getDuration());
        }
        if (other.hasTarget()) {
          bitField0_ |= 0x00000010;
          target_ = other.target_;
          onChanged();
        }
        if (other.hasDamageType()) {
          setDamageType(other.getDamageType());
        }
        if (other.hasDiscipline()) {
          setDiscipline(other.getDiscipline());
        }
        if (other.hasInfluence()) {
          setInfluence(other.getInfluence());
        }
        if (other.hasActive()) {
          setActive(other.getActive());
        }
        if (other.hasDispel()) {
          setDispel(other.getDispel());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.eldritch.invoken.proto.Effects.Effect parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.eldritch.invoken.proto.Effects.Effect) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .scifirpg.Effect.Type type = 8;
      private com.eldritch.invoken.proto.Effects.Effect.Type type_ = com.eldritch.invoken.proto.Effects.Effect.Type.DAMAGE_MELEE;
      /**
       * <code>optional .scifirpg.Effect.Type type = 8;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .scifirpg.Effect.Type type = 8;</code>
       */
      public com.eldritch.invoken.proto.Effects.Effect.Type getType() {
        return type_;
      }
      /**
       * <code>optional .scifirpg.Effect.Type type = 8;</code>
       */
      public Builder setType(com.eldritch.invoken.proto.Effects.Effect.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .scifirpg.Effect.Type type = 8;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.eldritch.invoken.proto.Effects.Effect.Type.DAMAGE_MELEE;
        onChanged();
        return this;
      }

      // optional .scifirpg.Effect.Range range = 2;
      private com.eldritch.invoken.proto.Effects.Effect.Range range_ = com.eldritch.invoken.proto.Effects.Effect.Range.PLAYER;
      /**
       * <code>optional .scifirpg.Effect.Range range = 2;</code>
       */
      public boolean hasRange() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .scifirpg.Effect.Range range = 2;</code>
       */
      public com.eldritch.invoken.proto.Effects.Effect.Range getRange() {
        return range_;
      }
      /**
       * <code>optional .scifirpg.Effect.Range range = 2;</code>
       */
      public Builder setRange(com.eldritch.invoken.proto.Effects.Effect.Range value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        range_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .scifirpg.Effect.Range range = 2;</code>
       */
      public Builder clearRange() {
        bitField0_ = (bitField0_ & ~0x00000002);
        range_ = com.eldritch.invoken.proto.Effects.Effect.Range.PLAYER;
        onChanged();
        return this;
      }

      // optional int32 magnitude = 1;
      private int magnitude_ ;
      /**
       * <code>optional int32 magnitude = 1;</code>
       */
      public boolean hasMagnitude() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 magnitude = 1;</code>
       */
      public int getMagnitude() {
        return magnitude_;
      }
      /**
       * <code>optional int32 magnitude = 1;</code>
       */
      public Builder setMagnitude(int value) {
        bitField0_ |= 0x00000004;
        magnitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 magnitude = 1;</code>
       */
      public Builder clearMagnitude() {
        bitField0_ = (bitField0_ & ~0x00000004);
        magnitude_ = 0;
        onChanged();
        return this;
      }

      // optional int32 duration = 3 [default = 0];
      private int duration_ ;
      /**
       * <code>optional int32 duration = 3 [default = 0];</code>
       *
       * <pre>
       * Length of effect in complete turns (turn = all actors take action)
       * -1 = constant
       * 0 = immediate
       * </pre>
       */
      public boolean hasDuration() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 duration = 3 [default = 0];</code>
       *
       * <pre>
       * Length of effect in complete turns (turn = all actors take action)
       * -1 = constant
       * 0 = immediate
       * </pre>
       */
      public int getDuration() {
        return duration_;
      }
      /**
       * <code>optional int32 duration = 3 [default = 0];</code>
       *
       * <pre>
       * Length of effect in complete turns (turn = all actors take action)
       * -1 = constant
       * 0 = immediate
       * </pre>
       */
      public Builder setDuration(int value) {
        bitField0_ |= 0x00000008;
        duration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 duration = 3 [default = 0];</code>
       *
       * <pre>
       * Length of effect in complete turns (turn = all actors take action)
       * -1 = constant
       * 0 = immediate
       * </pre>
       */
      public Builder clearDuration() {
        bitField0_ = (bitField0_ & ~0x00000008);
        duration_ = 0;
        onChanged();
        return this;
      }

      // optional string target = 6;
      private java.lang.Object target_ = "";
      /**
       * <code>optional string target = 6;</code>
       */
      public boolean hasTarget() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string target = 6;</code>
       */
      public java.lang.String getTarget() {
        java.lang.Object ref = target_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          target_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string target = 6;</code>
       */
      public com.google.protobuf.ByteString
          getTargetBytes() {
        java.lang.Object ref = target_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          target_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string target = 6;</code>
       */
      public Builder setTarget(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        target_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string target = 6;</code>
       */
      public Builder clearTarget() {
        bitField0_ = (bitField0_ & ~0x00000010);
        target_ = getDefaultInstance().getTarget();
        onChanged();
        return this;
      }
      /**
       * <code>optional string target = 6;</code>
       */
      public Builder setTargetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        target_ = value;
        onChanged();
        return this;
      }

      // optional .scifirpg.DamageType damage_type = 4;
      private com.eldritch.invoken.proto.Effects.DamageType damageType_ = com.eldritch.invoken.proto.Effects.DamageType.PHYSICAL;
      /**
       * <code>optional .scifirpg.DamageType damage_type = 4;</code>
       *
       * <pre>
       * Only applicable to certain types
       * </pre>
       */
      public boolean hasDamageType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .scifirpg.DamageType damage_type = 4;</code>
       *
       * <pre>
       * Only applicable to certain types
       * </pre>
       */
      public com.eldritch.invoken.proto.Effects.DamageType getDamageType() {
        return damageType_;
      }
      /**
       * <code>optional .scifirpg.DamageType damage_type = 4;</code>
       *
       * <pre>
       * Only applicable to certain types
       * </pre>
       */
      public Builder setDamageType(com.eldritch.invoken.proto.Effects.DamageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        damageType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .scifirpg.DamageType damage_type = 4;</code>
       *
       * <pre>
       * Only applicable to certain types
       * </pre>
       */
      public Builder clearDamageType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        damageType_ = com.eldritch.invoken.proto.Effects.DamageType.PHYSICAL;
        onChanged();
        return this;
      }

      // optional .scifirpg.Discipline discipline = 5;
      private com.eldritch.invoken.proto.Disciplines.Discipline discipline_ = com.eldritch.invoken.proto.Disciplines.Discipline.WARFARE;
      /**
       * <code>optional .scifirpg.Discipline discipline = 5;</code>
       */
      public boolean hasDiscipline() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .scifirpg.Discipline discipline = 5;</code>
       */
      public com.eldritch.invoken.proto.Disciplines.Discipline getDiscipline() {
        return discipline_;
      }
      /**
       * <code>optional .scifirpg.Discipline discipline = 5;</code>
       */
      public Builder setDiscipline(com.eldritch.invoken.proto.Disciplines.Discipline value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        discipline_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .scifirpg.Discipline discipline = 5;</code>
       */
      public Builder clearDiscipline() {
        bitField0_ = (bitField0_ & ~0x00000040);
        discipline_ = com.eldritch.invoken.proto.Disciplines.Discipline.WARFARE;
        onChanged();
        return this;
      }

      // optional .scifirpg.Influence influence = 9;
      private com.eldritch.invoken.proto.Disciplines.Influence influence_ = com.eldritch.invoken.proto.Disciplines.Influence.PERSUASION;
      /**
       * <code>optional .scifirpg.Influence influence = 9;</code>
       */
      public boolean hasInfluence() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .scifirpg.Influence influence = 9;</code>
       */
      public com.eldritch.invoken.proto.Disciplines.Influence getInfluence() {
        return influence_;
      }
      /**
       * <code>optional .scifirpg.Influence influence = 9;</code>
       */
      public Builder setInfluence(com.eldritch.invoken.proto.Disciplines.Influence value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        influence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .scifirpg.Influence influence = 9;</code>
       */
      public Builder clearInfluence() {
        bitField0_ = (bitField0_ & ~0x00000080);
        influence_ = com.eldritch.invoken.proto.Disciplines.Influence.PERSUASION;
        onChanged();
        return this;
      }

      // optional bool active = 7 [default = true];
      private boolean active_ = true;
      /**
       * <code>optional bool active = 7 [default = true];</code>
       *
       * <pre>
       * Active effects must be used manually in context-specific situations.
       * If an item or aug has active effects, an action card will be placed
       * into the player's deck.  The active effects for an aug can only be used
       * once per stage.  Active effects for items can be used repeatedly.
       *
       * Passive effects have their effects applied upon staging or equipping and stack with
       * successive stages (for augs).  These effects are not applied again if the action card
       * is used to trigger the active effects associated with an item or aug.
       * </pre>
       */
      public boolean hasActive() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool active = 7 [default = true];</code>
       *
       * <pre>
       * Active effects must be used manually in context-specific situations.
       * If an item or aug has active effects, an action card will be placed
       * into the player's deck.  The active effects for an aug can only be used
       * once per stage.  Active effects for items can be used repeatedly.
       *
       * Passive effects have their effects applied upon staging or equipping and stack with
       * successive stages (for augs).  These effects are not applied again if the action card
       * is used to trigger the active effects associated with an item or aug.
       * </pre>
       */
      public boolean getActive() {
        return active_;
      }
      /**
       * <code>optional bool active = 7 [default = true];</code>
       *
       * <pre>
       * Active effects must be used manually in context-specific situations.
       * If an item or aug has active effects, an action card will be placed
       * into the player's deck.  The active effects for an aug can only be used
       * once per stage.  Active effects for items can be used repeatedly.
       *
       * Passive effects have their effects applied upon staging or equipping and stack with
       * successive stages (for augs).  These effects are not applied again if the action card
       * is used to trigger the active effects associated with an item or aug.
       * </pre>
       */
      public Builder setActive(boolean value) {
        bitField0_ |= 0x00000100;
        active_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool active = 7 [default = true];</code>
       *
       * <pre>
       * Active effects must be used manually in context-specific situations.
       * If an item or aug has active effects, an action card will be placed
       * into the player's deck.  The active effects for an aug can only be used
       * once per stage.  Active effects for items can be used repeatedly.
       *
       * Passive effects have their effects applied upon staging or equipping and stack with
       * successive stages (for augs).  These effects are not applied again if the action card
       * is used to trigger the active effects associated with an item or aug.
       * </pre>
       */
      public Builder clearActive() {
        bitField0_ = (bitField0_ & ~0x00000100);
        active_ = true;
        onChanged();
        return this;
      }

      // optional bool dispel = 10 [default = false];
      private boolean dispel_ ;
      /**
       * <code>optional bool dispel = 10 [default = false];</code>
       */
      public boolean hasDispel() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool dispel = 10 [default = false];</code>
       */
      public boolean getDispel() {
        return dispel_;
      }
      /**
       * <code>optional bool dispel = 10 [default = false];</code>
       */
      public Builder setDispel(boolean value) {
        bitField0_ |= 0x00000200;
        dispel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool dispel = 10 [default = false];</code>
       */
      public Builder clearDispel() {
        bitField0_ = (bitField0_ & ~0x00000200);
        dispel_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:scifirpg.Effect)
    }

    static {
      defaultInstance = new Effect(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:scifirpg.Effect)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_scifirpg_Effect_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_scifirpg_Effect_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)com/eldritch/scifirpg/proto/effects.pr" +
      "oto\022\010scifirpg\032-com/eldritch/scifirpg/pro" +
      "to/disciplines.proto\"\202\t\n\006Effect\022#\n\004type\030" +
      "\010 \001(\0162\025.scifirpg.Effect.Type\022%\n\005range\030\002 " +
      "\001(\0162\026.scifirpg.Effect.Range\022\021\n\tmagnitude" +
      "\030\001 \001(\005\022\023\n\010duration\030\003 \001(\005:\0010\022\016\n\006target\030\006 " +
      "\001(\t\022)\n\013damage_type\030\004 \001(\0162\024.scifirpg.Dama" +
      "geType\022(\n\ndiscipline\030\005 \001(\0162\024.scifirpg.Di" +
      "scipline\022&\n\tinfluence\030\t \001(\0162\023.scifirpg.I" +
      "nfluence\022\024\n\006active\030\007 \001(\010:\004true\022\025\n\006dispel",
      "\030\n \001(\010:\005false\"\272\005\n\004Type\022\020\n\014DAMAGE_MELEE\020\000" +
      "\022\021\n\rDAMAGE_RANGED\020\"\022\020\n\014DAMAGE_HEAVY\020#\022\026\n" +
      "\022DAMAGE_COORDINATED\020$\022\025\n\021DAMAGE_CORRUPTI" +
      "ON\020%\022\t\n\005DRAIN\020\001\022\014\n\010SUPPRESS\020-\022\020\n\014ACCURAC" +
      "Y_MOD\020(\022\017\n\013DEFENSE_MOD\020)\022\022\n\016RESISTANCE_M" +
      "OD\020*\022\022\n\016PERCEPTION_MOD\020+\022\020\n\014CRITICAL_MOD" +
      "\020,\022\t\n\005SNEAK\020\002\022\n\n\006PILFER\020\003\022\t\n\005STALK\020\004\022\017\n\013" +
      "IMPERSONATE\020\005\022\r\n\tAUTHORIZE\020\'\022\024\n\020DETECT_E" +
      "QUIPMENT\020\006\022\017\n\013DETECT_AUGS\020\007\022\021\n\rDETECT_BU" +
      "FFER\020\010\022\020\n\014DETECT_TRAPS\020\t\022\010\n\004OPEN\020\n\022\013\n\007DI",
      "SABLE\020\013\022\014\n\010SHUTDOWN\020\014\022\010\n\004SCAN\020\r\022\014\n\010PARAL" +
      "YZE\020\016\022\013\n\007CONTROL\020\017\022\020\n\014CREATE_GOLEM\020\020\022\020\n\014" +
      "CREATE_SWARM\020\021\022\r\n\tREANIMATE\020\022\022\016\n\nREGENER" +
      "ATE\020\023\022\013\n\007BARRIER\020\024\022\n\n\006MIRROR\020\025\022\n\n\006ABSORB" +
      "\020\026\022\t\n\005CLOAK\020\027\022\n\n\006MUFFLE\020\030\022\021\n\rDETECT_TRAI" +
      "TS\020\031\022\t\n\005CHARM\020\032\022\010\n\004CALM\020\033\022\n\n\006FRENZY\020\034\022\t\n" +
      "\005PARRY\020\035\022\n\n\006DEFEND\020\036\022\n\n\006RESIST\020\037\022\n\n\006REVE" +
      "AL\020 \022\r\n\tINTERRUPT\020!\022\r\n\tINFLUENCE\020&\"\214\001\n\005R" +
      "ange\022\n\n\006PLAYER\020\000\022\014\n\010SELECTED\020\001\022\007\n\003ALL\020\002\022" +
      "\r\n\tALL_OTHER\020\003\022\017\n\013ALL_HOSTILE\020\004\022\016\n\nALL_A",
      "LLIED\020\005\022\014\n\010TARGETER\020\006\022\016\n\nSPREAD_ALL\020\007\022\022\n" +
      "\016SPREAD_HOSTILE\020\010*N\n\nDamageType\022\014\n\010PHYSI" +
      "CAL\020\000\022\013\n\007THERMAL\020\001\022\017\n\013RADIOACTIVE\020\002\022\t\n\005T" +
      "OXIC\020\003\022\t\n\005VIRAL\020\004B\034\n\032com.eldritch.invoke" +
      "n.proto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_scifirpg_Effect_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_scifirpg_Effect_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_scifirpg_Effect_descriptor,
              new java.lang.String[] { "Type", "Range", "Magnitude", "Duration", "Target", "DamageType", "Discipline", "Influence", "Active", "Dispel", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.eldritch.invoken.proto.Disciplines.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
