syntax = "proto2";

package scifirpg;
option java_package = "com.eldritch.scifirpg.proto";

import "com/eldritch/scifirpg/proto/disciplines.proto";
import "com/eldritch/scifirpg/proto/prerequisites.proto";
import "com/eldritch/scifirpg/proto/outcomes.proto";

message Faction {
	message Relation {
		optional string faction_id = 1; // OPTIONAL: might change to int32
		optional int32 reaction = 2; // positive good, negative bad
	}

	required string name = 1;
	repeated Relation relation = 2;
	repeated Discipline favored_discipline = 3;
}

message DialogueTree {
	// DialogueTree ends when the player reaches a Response with no choices.
	// When the DialogueTree ends, the player is returned to the first valid greeting.
	message Response {
		optional string id = 5; // The unique ID for this Response within this tree
		required string text = 1;
		repeated Prerequisite prereq = 2;
		repeated Choice choice = 3;
		repeated Outcome outcome = 4;
		required bool greeting = 6 [default = false];
	}

	// By storing successor pointers as strings, we allow for cycles
	message Choice {
		required string text = 1;
		repeated Prerequisite prereq = 2;
		repeated string successor_id = 3;
	}

	// We keep all Response options as a list, then convert them to a map in memory so we
	// can traverse the DialogueTree via pointers in Choices.  Some Responses are marked
	// as greetings, and one of these will serve as the 'root' of the tree.
	//
	// Multiple greetings are possible depending on what prereqs are met.
	// Order matters as the first greeting to meet all prereqs will be chosen,
	// even if multiple options are satisfied.
	//
	// A DialogueTree exists in isolation, unique to a particular Actor.  No Response is
	// shared in this design.
	repeated Response dialogue = 1;
}

message ActorDialogue {
	optional string actor_id = 1;
	optional string dialogue_id = 2;
}

message ActorParams {
	enum Gender {
		MALE = 0;
		FEMALE = 1;
	}

	enum Profession {
		WARRIOR = 0;
		EXECUTOR = 1;
		SENTINEL = 2;
		CAPTAIN = 3;
		ARCHITECT = 4;
		HACKER = 5;
		POET = 6;
		SPECTER = 7;
		AGENT = 8;
		BROKER = 9;
	}

	message Skill {
		required Discipline discipline = 1;
		required int32 level = 2;
		optional int32 xp = 3; // OPTIONAL: may make global XP, N/A for NPCs
	}

	message FactionStatus {
		optional string faction_id = 1; // OPTIONAL: might change to int32
		optional int32 reputation = 2;
		optional int32 rank = 3; // not sure how to use this just yet
	}

	message Item {
		optional string item_id = 1; // OPTIONAL: may change to int32
		required int32 count = 2;
	}

	// Names for various dialogue scenarios
	optional string id = 22; // unique key
	required string name = 1;

	// Static info
	required Gender gender = 6;

	// Dynamic info
	required int32 level = 8;
	repeated Skill skill = 9;
	repeated FactionStatus faction_status = 10;
	repeated Item inventory_item = 11;
	repeated string known_aug_id = 15;
}

message NonPlayerActor {
	enum Trait {
		AFFABLE = 0;
		SURLY = 1;
		GREEDY = 2;
		ALTRUISTIC = 3;
		LICENTIOUS = 4;
		CHASTE = 5;
		DOGMATIC = 6;
		RATIONAL = 7;
		INSECURE = 8;
		CONFIDENT = 9;
		GULLIBLE = 10;
		SHREWD = 11;
		DOCILE = 12;
		IMPOSING = 13;
	}

	enum Aggression {
		PACIFIST = 0; // Does not attack anyone
		NORMAL = 1; // Will attack if provoked
		AGGRESSIVE = 2; // Will attack enemies on sight
		FRENZIED = 3; // Attacks anyone on sight
	}

	required ActorParams params = 1;
	required bool unique = 2 [default = false];
	required bool can_speak = 3 [default = true];
	optional DialogueTree dialogue = 4;

	optional Aggression aggression = 5;
	repeated Trait trait = 6;
}

message PlayerActor {
	message StagedAugmentation {
		// Every aug has a slot requirement R.  By staging an aug, you fill up
		// R slots in the actor's slot bank.  Augs can be staged multiple times.
		// For every stage, an aug grants one use.
		optional string aug_id = 1; // OPTIONAL: may change to int32
		required int32 remaining_uses = 2;
		required int32 stages = 3;
	}

	required ActorParams params = 1;

	required int32 health = 7; // remaining, max health is calculated
	repeated string equipped_item_id = 21; // NPC: if not specified, inferred from inventory
	repeated StagedAugmentation staged_augmentation = 16; // if not specified, inferred from known augs

	repeated string encounter_seen = 19;
	repeated ActorDialogue dialogue_seen = 20;
}
